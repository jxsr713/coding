#!/usr/bin/python3.3
# -*- coding: utf-8 -*-

import re
import os
import argparse
import getopt
import sys

#######################################################################
# define function
paraKeys = "f:b:s:d:k:hv"
paraLst = ["func=", "board", "src=", "dst=", "key=",
           "help", "version"]

g_funcType = -1

g_funcLst = ['help', 'ssd_info', 'scp_brd' , 'telnet' , 'ssh',
             'get_ip', 'get_con','get_brds', #data from sys_info.tcl
             'pro_info',                     #data from product web
             'update_csv'                   #update csv files
             ]

g_funcHelp = ['Show command help', 'Show ssd information', 'scp file to a brd',
              'telnet board', 'login board through ssh'
              'Get IP address', "Get console info", "List same type boards",
              "Search product information",
              "update csv file from web/tcl"
              ]


g_dataSrc = 0
g_dataFrom = ['csv', 'web']


g_brdLst = []
g_src=""
g_dst=""



def usage():
    """
    The output  configuration file contents.
    Usage: xxxxx.py [-f|--func,[get .....]] [-b|--board,[string]] [-k|--key [keys list] [-h|--help] [-v|--version]

    Description
        -f,--func functions
        -c,--column header string
        -k,--key search string
        -h,--help    Display help information.
        -v,--version  Display version number.
        for example:
            python config.py -d 13
            python config.py -c allow
            python config.py -h
            python config.py -d 13 -c allow
    """
    print("{}     {}".format(paraKeys, paraLst))
    print(g_funcLst)
    print(g_funcHelp)

##########################################################################
def parserOpt():
    global g_funcType, g_funcLst, g_funcHelp, paraKeys, paraLst
    global g_brdLst, g_src, g_dst

    try:
        options,args = getopt.getopt(sys.argv[1:], paraKeys,  paraLst)
    except getopt.GetoptError as err:
        print(str(err))
        print(usage.__doc__)
        usage()
        sys.exit(1)

    if not options:
        print(usage.__doc__)
        usage()
        sys.exit(1)

    for opt, a in options:
        print("Get ==:", opt)
        if opt in ("-h", "--help"):
            print(usage.__doc__)
            usage()
            exit(0)
        elif opt in ("-f", "--func"):
            print("Get ==:", a)
            if a in g_funcLst:
                g_funcType = g_funcLst.index(a)
            else:
                print("invalid function!!!", a)
        elif opt in ("-b", "--board"):
            g_brdLst.append(a)
        elif opt in ("-s", "--src"):
            # 0:all 1:single
            g_src = a
        elif opt in ("-d", "--dst"):
            g_dst = a
        else:
            print("No para: will exe get all boards infor")
    return

